#include <SDL.h>
#include <SDL_image.h>
#include <stdio.h>
#include <stdlib.h>

const int SCREEN_WIDTH = 480;
const int SCREEN_HEIGHT = 480;
const int moveForward = 20;
const int interval = 500;

enum dir{ up, right, down, left };

int snakeLength = 4;
int oldDirection = right;
int newDirection = right;

SDL_Rect* oldSnake = NULL;
SDL_Rect food;

Uint32 tNow, tOld = -interval;

bool init();
void close();

SDL_Window* gWindow = NULL;
SDL_Renderer* gRenderer = NULL;

bool init() {
	bool success = true;
	if( SDL_Init( SDL_INIT_VIDEO ) < 0 ) {
		printf( "SDL could not initialize! SDL Error: %s\n", SDL_GetError() );
		success = false;
	}
	else {
		if( !SDL_SetHint( SDL_HINT_RENDER_SCALE_QUALITY, "1" ) )
			printf( "Warning: Linear texture filtering not enabled!" );

		gWindow = SDL_CreateWindow( "SDL Tutorial", SDL_WINDOWPOS_UNDEFINED, SDL_WINDOWPOS_UNDEFINED, SCREEN_WIDTH, SCREEN_HEIGHT, SDL_WINDOW_SHOWN );
		if( gWindow == NULL ) {
			printf( "Window could not be created! SDL Error: %s\n", SDL_GetError() );
			success = false;
		}
		else {
			gRenderer = SDL_CreateRenderer( gWindow, -1, SDL_RENDERER_ACCELERATED );
			if( gRenderer == NULL ) {
				printf( "Renderer could not be created! SDL Error: %s\n", SDL_GetError() );
				success = false;
			}
			else {
				SDL_SetRenderDrawColor( gRenderer, 0xFF, 0xFF, 0xFF, 0xFF );
				int imgFlags = IMG_INIT_PNG;
				if( !( IMG_Init( imgFlags ) & imgFlags ) ) {
					printf( "SDL_image could not initialize! SDL_image Error: %s\n", IMG_GetError() );
					success = false;
				}
			}
		}
	}
	return success;
}

void close() {
	SDL_DestroyRenderer( gRenderer );
	SDL_DestroyWindow( gWindow );
	gWindow = NULL;
	gRenderer = NULL;
	IMG_Quit();
	SDL_Quit();
}

void updateDirection(dir nova) {
    if (newDirection == oldDirection)
        if (oldDirection == up && nova != down || oldDirection == right && nova != left || oldDirection == down && nova != up || oldDirection == left && nova != right)
            newDirection = nova;
}

bool lostGame() {
    int i;
    if (newDirection == up) {
        if (oldSnake[0].y - moveForward < 0)
            return true;
        for (i == 0; i < snakeLength; i++)
            if (oldSnake[0].x == oldSnake[i].x && oldSnake[0].y - moveForward == oldSnake[i].y)
                return true;
    }
    else if (newDirection == right) {
        if (oldSnake[0].x + moveForward >= SCREEN_WIDTH)
            return true;
        for (i == 0; i < snakeLength; i++)
            if (oldSnake[0].x + moveForward == oldSnake[i].x && oldSnake[0].y == oldSnake[i].y)
                return true;
    }
    else if (newDirection == down) {
        if (oldSnake[0].y + moveForward >= SCREEN_HEIGHT)
            return true;
        for (i == 0; i < snakeLength; i++)
            if (oldSnake[0].x == oldSnake[i].x && oldSnake[0].y + moveForward == oldSnake[i].y)
                return true;
    }
    else if (newDirection == left) {
        if (oldSnake[0].x - moveForward < 0)
            return true;
        for (i == 0; i < snakeLength; i++)
            if (oldSnake[0].x - moveForward == oldSnake[i].x && oldSnake[0].y == oldSnake[i].y)
                return true;
    }
    return false;
}

bool ateFood() {
    if (newDirection == up) {
        if (oldSnake[0].x == food.x && oldSnake[0].y - moveForward == food.y)
            return true;
    }
    else if (newDirection == right) {
        if (oldSnake[0].x + moveForward == food.x && oldSnake[0].y == food.y)
            return true;
    }
    else if (newDirection == down) {
        if (oldSnake[0].x == food.x && oldSnake[0].y + moveForward == food.y)
            return true;
    }
    else if (newDirection == left) {
        if (oldSnake[0].x - moveForward == food.x && oldSnake[0].y == food.y)
            return true;
    }
    return false;
}

void renderScreen() {
    int i;
    oldDirection = newDirection;

    SDL_SetRenderDrawColor( gRenderer, 0xFF, 0xFF, 0xFF, 0xFF );
    SDL_RenderClear( gRenderer );
    SDL_SetRenderDrawColor( gRenderer, 0x00, 0x00, 0xFF, 0xFF );

    bool aumentou = ateFood();

    if (aumentou)
        snakeLength++;

    SDL_Rect snake[snakeLength];
    for (i = 0 ; i < snakeLength; i++)
    {
        if (i == 0)
            switch(newDirection)
            {
                case up:
                    snake[i] = { oldSnake[i].x, oldSnake[i].y - moveForward, 20, 20 };
                    break;
                case right:
                    snake[i] = { oldSnake[i].x + moveForward, oldSnake[i].y, 20, 20 };
                    break;
                case down:
                    snake[i] = { oldSnake[i].x, oldSnake[i].y + moveForward, 20, 20 };
                    break;
                case left:
                    snake[i] = { oldSnake[i].x - moveForward, oldSnake[i].y, 20, 20 };
                    break;
                default:
                    printf("Invalid input!\n");
                    break;
            }
        else
            snake[i] = { oldSnake[i - 1].x, oldSnake[i - 1].y, 20, 20 };

        SDL_RenderFillRect( gRenderer, &snake[i] );
    }

    free(oldSnake);
    oldSnake = (SDL_Rect*) malloc(sizeof(SDL_Rect) * snakeLength);
    for (i = 0 ; i < snakeLength; i++)
        oldSnake[i] = { snake[i].x, snake[i].y, 20, 20 };

    if (food.x == oldSnake[0].x && food.y == oldSnake[0].y)
    {
        bool repete;
        do {
            food = { (rand() % 24) * 20, (rand() % 24) * 20, 20, 20 };

            repete = false;
            for (i = 0 ; i < snakeLength; i++)
                if (food.x == oldSnake[i].x && food.y == oldSnake[i].y)
                    repete = true;
        }
        while (repete);
    }


    SDL_SetRenderDrawColor( gRenderer, 0xFF, 0xFF, 0x00, 0xFF );
    SDL_RenderFillRect( gRenderer, &food );

    SDL_RenderPresent( gRenderer );
}

int main( int argc, char* args[] ) {
    int i;
    oldSnake = (SDL_Rect *) malloc(sizeof(SDL_Rect) * snakeLength);
    for (i = 0 ; i < snakeLength; i++)
        oldSnake[i] = { SCREEN_WIDTH / 2 - i * 20, SCREEN_HEIGHT / 2, 20, 20 };

    food = { (rand() % 24) * 20, (rand() % 24) * 20, 20, 20 };

	if( !init() )
		printf( "Failed to initialize!\n" );
	else {
        bool quit = false;
        SDL_Event e;
        while( !quit ) {
            while( SDL_PollEvent( &e ) != 0 ) {
                if( e.type == SDL_QUIT )
                    quit = true;
                else if(e.type == SDL_KEYDOWN)
                    switch(e.key.keysym.sym) {
                        case SDLK_UP:
                            updateDirection(up);
                            break;
                        case SDLK_RIGHT:
                            updateDirection(right);
                            break;
                        case SDLK_DOWN:
                            updateDirection(down);
                            break;
                        case SDLK_LEFT:
                            updateDirection(left);
                            break;
                        default:
                            printf("Invalid input!\n");
                            break;
                    }
            }if (newDirection == up)
    {
        if (oldSnake[0].y < 0)
            return true;

        for (i == 0; i < snakeLength; i++)
            if (oldSnake[0].y - moveForward == oldSnake[i].y)
                return true;
    }

            tNow = SDL_GetTicks();
            if (tNow > tOld + interval) {
                if (!lostGame()) {
                    renderScreen();
                    tOld = tNow;
                }
                else
                    break;
            }
        }
	}
	close();
	return 0;
}
